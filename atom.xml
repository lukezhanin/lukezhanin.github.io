<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迎向灵光消逝的年代</title>
  
  <subtitle>Fire walk with me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lukezhanin.github.io/"/>
  <updated>2019-01-29T13:28:48.987Z</updated>
  <id>https://lukezhanin.github.io/</id>
  
  <author>
    <name>Luke Zhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenVPN 限制指定用户访问范围</title>
    <link href="https://lukezhanin.github.io/2019/01/13/OpenVPN-%E9%99%90%E5%88%B6%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E8%8C%83%E5%9B%B4/"/>
    <id>https://lukezhanin.github.io/2019/01/13/OpenVPN-限制指定用户访问范围/</id>
    <published>2019-01-13T07:55:29.000Z</published>
    <updated>2019-01-29T13:28:48.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TLDR版本"><a href="#TLDR版本" class="headerlink" title="TLDR版本"></a>TLDR版本</h1><p>给 DD-WRT 中的 OpenVPN 用户分配固定 IP，并限制用户访问内网范围：</p><h2 id="配置-OpenVPN，给用户分配固定IP"><a href="#配置-OpenVPN，给用户分配固定IP" class="headerlink" title="配置 OpenVPN，给用户分配固定IP"></a>配置 OpenVPN，给用户分配固定IP</h2><p>ssh 登录 DD-WRT，在<code>/jffs/etc/openvpn/ccd</code>下创建用户同名文件，并写入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig-push 192.168.123.253 255.255.255.0</span><br></pre></td></tr></table></figure><blockquote><p>VPN 子网按需修改。VPN Topology 模式配置为 Subnet。</p></blockquote><h2 id="配置防火墙，限制用户访问范围"><a href="#配置防火墙，限制用户访问范围" class="headerlink" title="配置防火墙，限制用户访问范围"></a>配置防火墙，限制用户访问范围</h2><p>ssh 登录 DD-WRT，配置防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 只允许 `192.168.123.253` 的 ip 访问 `192.168.0.60`：</span><br><span class="line">iptables -I FORWARD -i tun0 -s 192.168.123.253 ! -d 192.168.0.60 -j DROP</span><br></pre></td></tr></table></figure><h1 id="背景和需求"><a href="#背景和需求" class="headerlink" title="背景和需求"></a>背景和需求</h1><p>由于需要与其他公司的开发人员配合调试，远程部署到对方环境太麻烦，于是就想，能不能直接让对方 VPN 到内网来，调试起来有问题直接改。</p><p>出口路由器使用的是 DD-WRT， 内置了 OpenVPN，已经配置好证书且能正常登录。但现在的配置下 VPN 过来会有两个问题：</p><ol><li>客户端 IP 是动态分配的</li><li>由于客户端 IP 是动态的，所以无法用防火墙无法限制对方能访问的地址范围，会有信息泄露和安全问题。</li></ol><p>鉴于 DD-WRT 是基于 Linux 的固件，应该能配置出来，于是研究了一下。</p><p>DD-WRT 版本为： <code>DD-WRT v24-sp2 (03/25/13)</code>。</p><h1 id="思路和过程"><a href="#思路和过程" class="headerlink" title="思路和过程"></a>思路和过程</h1><p>如果能让特定用户登录后分配一个固定 IP，那访问权限限制就能轻松用防火墙实现。</p><p>首先找到了 DD-WRT 的 <a href="https://wiki.dd-wrt.com/wiki/index.php/OpenVPN#OpenVPN_in_DD-WRT" target="_blank" rel="noopener">Wiki</a>，信息比较简略，找不到能够修改客户端地址分配的配置。直接看 OpenVPN 的<a href="https://openvpn.net/community-resources/how-to/#scope" target="_blank" rel="noopener">文档</a>，发现确实可以给特定用户分配固定地址。关键配置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client-config-dir ccd</span><br></pre></td></tr></table></figure><p>具体的原理是：特定用户的配置文件，放在 <code>ccd</code>目录下，与用户名同名。OpenVPN 在用户登录时会检查相应配置并推送到客户端，且能动态生效，无需重启 OpenVPN 或 DD-WRT。</p><p>OpenVPN 文档里描述了如何给用户分配固定地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ccd/sysadmin1</span><br><span class="line">ifconfig-push 10.8.1.1 10.8.1.2</span><br></pre></td></tr></table></figure><p>再回头查 DD-WRT 文档里 OpenVPN 用户配置目录为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client-config-dir /tmp/openvpn/ccd</span><br></pre></td></tr></table></figure><p> 也就是说我们把客户端配置文件放到 DD-WRT 上的默认客户端配置目录下就行了。</p><p>不过这个地方有个问题：/tmp 文件系统是 DD-WRT 启动后在内存中建立的，重启后就会消失。又是好一番搜索，在 DD-WRT 论坛中找到一个<a href="https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=313912&amp;sid=2812478d99f4f916d3b65b1d9558698d" target="_blank" rel="noopener">解决方案</a>，在启动后用脚本自动重建配置文件。</p><p>能实现功能，但不够简单优雅。再找，终于在另一个<a href="https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=145460" target="_blank" rel="noopener">帖子</a>里发现，原来 DD-WRT 在其文件系统 <code>JFFS</code></p><p>中已经有 OpenVPN 对应的配置目录：<code>/jffs/etc/openvpn/ccd</code>。与 Wiki 中客户端配置文件在<code>/tmp/openvpn/ccd</code>中有点出入，试一下。</p><p>创建一个已有用户的配置文件，并用这个用户登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi test</span><br><span class="line">ifconfig-push 192.168.123.253 192.168.123.254</span><br><span class="line">保存</span><br></pre></td></tr></table></figure><blockquote><p>VPN 子网是 192.168.123.0/24</p></blockquote><p>客户端能登录 VPN，也能拿到指定的 IP，却无法访问内部网络。看样子应该是 IP 配置不正确。OpenVPN 文档中写明 IP 必须从这个集合里取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[  1,  2] [  5,  6] [  9, 10] [ 13, 14] [ 17, 18]</span><br><span class="line">[ 21, 22] [ 25, 26] [ 29, 30] [ 33, 34] [ 37, 38]</span><br><span class="line">[ 41, 42] [ 45, 46] [ 49, 50] [ 53, 54] [ 57, 58]</span><br><span class="line">[ 61, 62] [ 65, 66] [ 69, 70] [ 73, 74] [ 77, 78]</span><br><span class="line">[ 81, 82] [ 85, 86] [ 89, 90] [ 93, 94] [ 97, 98]</span><br><span class="line">[101,102] [105,106] [109,110] [113,114] [117,118]</span><br><span class="line">[121,122] [125,126] [129,130] [133,134] [137,138]</span><br><span class="line">[141,142] [145,146] [149,150] [153,154] [157,158]</span><br><span class="line">[161,162] [165,166] [169,170] [173,174] [177,178]</span><br><span class="line">[181,182] [185,186] [189,190] [193,194] [197,198]</span><br><span class="line">[201,202] [205,206] [209,210] [213,214] [217,218]</span><br><span class="line">[221,222] [225,226] [229,230] [233,234] [237,238]</span><br><span class="line">[241,242] [245,246] [249,250] [253,254]</span><br></pre></td></tr></table></figure><p>难道还有蹊跷？顺藤摸瓜发现，原来在 OpenVPN 中有 <a href="https://community.openvpn.net/openvpn/wiki/Concepts-Addressing" target="_blank" rel="noopener">Topology</a> 的概念，而前文所述的 IP 集合是在 <code>net30</code>的 Topology 模式下使用的。我们使用的是 <code>Subnet</code>模式，直接指定子网掩码就行了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig-push 192.168.123.254 255.255.255.0</span><br></pre></td></tr></table></figure><p>配置好后 VPN 登录 OK。</p><p>至于防火墙配置就简单了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 只允许 `192.168.123.254` 的 ip 访问 `192.168.0.60`：</span><br><span class="line">iptables -I FORWARD -i tun0 -s 192.168.123.254 ! -d 192.168.0.60 -j DROP</span><br></pre></td></tr></table></figure><p>顺便推荐几篇讲 iptables 的<a href="http://www.zsythink.net/archives/tag/iptables/" target="_blank" rel="noopener">文章</a>，条理清晰，形象易懂，终于理清了困扰多年的 iptables 概念。</p><p>在 Mac 上试了 OK，搞定收工。</p><h1 id="一波又起"><a href="#一波又起" class="headerlink" title="一波又起"></a>一波又起</h1><p>VPN 证书发给对方后，对方却说登录失败，错误日志是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is a clash between the --ifconfig local address and the internal DHCP server address</span><br></pre></td></tr></table></figure><p>一问发现是用 Windows 登录的。那么是地址不对？改成 <code>192.168.123.253</code>并相应修改防火墙规则后一切 OK，具体原因也找不到，猜测是跟 DHCP 分配的地址冲突了。但为什么 Mac 上又没问题？</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>思路很重要，多尝试不同的关键字搜索</li><li>测试需要考虑不同的平台，有可能有坑</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://openvpn.net/community-resources/how-to/#scope" target="_blank" rel="noopener">OpenVPN 配置固定 IP</a></li><li><a href="https://community.openvpn.net/openvpn/wiki/Concepts-Addressing" target="_blank" rel="noopener">Topology</a></li><li><a href="https://wiki.dd-wrt.com/wiki/index.php/OpenVPN#OpenVPN_in_DD-WRT" target="_blank" rel="noopener">DD-WRT Wiki</a></li><li><a href="https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=145460" target="_blank" rel="noopener">DD-WRT 中 OpenVPN 配置文件目录</a></li><li><a href="http://www.zsythink.net/archives/tag/iptables/" target="_blank" rel="noopener">Iptables 配置</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TLDR版本&quot;&gt;&lt;a href=&quot;#TLDR版本&quot; class=&quot;headerlink&quot; title=&quot;TLDR版本&quot;&gt;&lt;/a&gt;TLDR版本&lt;/h1&gt;&lt;p&gt;给 DD-WRT 中的 OpenVPN 用户分配固定 IP，并限制用户访问内网范围：&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="Tools&amp;Tips&amp;Tricks" scheme="https://lukezhanin.github.io/tags/Tools-Tips-Tricks/"/>
    
  </entry>
  
  <entry>
    <title>使用 JMX 远程监控 Docker 中运行的 Spring Boot 应用</title>
    <link href="https://lukezhanin.github.io/2019/01/12/%E4%BD%BF%E7%94%A8%20JMX%20%E7%9B%91%E6%8E%A7%20Docker%20%E4%B8%AD%E8%BF%90%E8%A1%8C%E7%9A%84%20Spring%20Boot%20%E5%BA%94%E7%94%A8/"/>
    <id>https://lukezhanin.github.io/2019/01/12/使用 JMX 监控 Docker 中运行的 Spring Boot 应用/</id>
    <published>2019-01-12T03:13:08.000Z</published>
    <updated>2019-01-14T02:05:50.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目中要求监控 Tomcat 的运行指标，如活动连接数、线程池情况等。我们使用的是 Spring Boot 内嵌的 Tomcat。</p><p>翻了下 Spring Boot 的手册，Spring Boot Actuator 中的 <code>/metrics</code> 端点中只暴露了 <code>httpsessions.active</code> 和 <code>httpsessions.max</code> 两个指标，不够用。</p><p>因此要研究一下如何开启 Spring Boot 内嵌 Tomcat 的 JMX 监控。</p><h1 id="远程监控"><a href="#远程监控" class="headerlink" title="远程监控"></a>远程监控</h1><p>Google 了一下，发现 Spring Boot 已支持 JMX 监控。本机直接启动 jconsole 即可连接。</p><p>远程 JMX 连接需要配置启动参数，在 JVM 启动参数中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote </span><br><span class="line">-Dcom.sun.management.jmxremote.port=<span class="number">1898</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="keyword">false</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="keyword">false</span> </span><br><span class="line">-Djava.rmi.server.hostname=<span class="number">192.168</span>.0.90</span><br></pre></td></tr></table></figure><p>具体在 IDEA 中需要配置到 <code>VM options</code>里。</p><h1 id="在-Docker-中远程监控"><a href="#在-Docker-中远程监控" class="headerlink" title="在 Docker 中远程监控"></a>在 Docker 中远程监控</h1><p>在 IDEA 中运行成功后，本以为将上面的启动参数加到 Docker 的环境变量里便能开开心心地玩耍了。谁知道 jconsole 可以远程连上 Docker 应用，但弹出不安全连接后，便连接失败。</p><p>搜索一番，终于在 <a href="https://ptmccarthy.github.io/2014/07/24/remote-jmx-with-docker/" target="_blank" rel="noopener">此处</a> 找到答案，原来 JMX 除了初始的连接端口外，还会另外动态分配一个端口用于 RMI 连接。因此要显式配置一下才行：</p><p><code>-Dcom.sun.management.jmxremote.rmi.port=1898</code></p><p>当然，Docker 的启动参数需要将端口 1898 映射出来。</p><p>完整的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote </span><br><span class="line">-Dcom.sun.management.jmxremote.port=<span class="number">1898</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.rmi.port=<span class="number">1898</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="keyword">false</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="keyword">false</span> </span><br><span class="line">-Djava.rmi.server.hostname=<span class="number">192.168</span>.0.90</span><br></pre></td></tr></table></figure><p>再想一下，为何在 IDEA 里面不需要显式配置RMI 端口呢？答案很简单，因为 Docker 必须显式指定映射到主机上的端口，动态分配的端口不会映射出来，因此 jconsole 连接时虽然刚开始可以连接上，但接下来 RMI 必然会失败。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;项目中要求监控 Tomcat 的运行指标，如活动连接数、线程池情况等。我们使用的是 Spring Boot 内嵌的 Tomcat。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Java" scheme="https://lukezhanin.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://lukezhanin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
