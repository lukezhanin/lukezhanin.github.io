<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迎向灵光消逝的年代</title>
  
  <subtitle>Fire walk with me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lukezhanin.github.io/"/>
  <updated>2019-03-29T09:05:25.456Z</updated>
  <id>https://lukezhanin.github.io/</id>
  
  <author>
    <name>Luke Zhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 中加载公共 jar 包内 i18n 资源文件的方法</title>
    <link href="https://lukezhanin.github.io/2019/03/29/Spring-Boot-%E4%B8%AD%E5%8A%A0%E8%BD%BD%E5%85%AC%E5%85%B1-jar-%E5%8C%85%E5%86%85-i18n-%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://lukezhanin.github.io/2019/03/29/Spring-Boot-中加载公共-jar-包内-i18n-资源文件的方法/</id>
    <published>2019-03-29T08:16:42.000Z</published>
    <updated>2019-03-29T09:05:25.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>开发了一个 Spring Boot Starter，内置了一些公共代码。其中包含默认的 Exception 处理器，需要国际化。打包后 的 starter jar 包里包含 i18n 资源目录为 <code>i18n/messages</code>，包含 <code>messages.properties</code>和<code>messages_en.properties</code>。</p><p>在使用 starter 的工程里，配置文件中 <code>spring.messages.basename</code>配置了<code>i18n/messages</code>，对应异常中消息并没有拿到对应的国际化资源。</p><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>首先跟踪 <code>messageSource.getMessages()</code>，发现并没有找到消息的 key。</p><p>那么是不是资源文件没有加载呢？跟踪 <code>MessageSourceAutoConfigure</code>，发现加载资源时使用的<code>local</code>是zh_CN。</p><p>于是怀疑是两个工程的资源文件夹重名，所以加载的时候被覆盖了？将 starter 内的文件夹改名为<code>i18n-base</code>，并且把资源文件重命名为 <code>messages_zh_CN.properties</code>。将<code>i18n-base</code>加入 <code>spring.messages.basename</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    messages:</span></span><br><span class="line">        <span class="comment">#设置国际化配置文件存放在 classpath:/i18n 目录下</span></span><br><span class="line"><span class="attr">        basename:</span> <span class="string">i18n/messages,</span> <span class="string">i18n-base/messages</span></span><br></pre></td></tr></table></figure><p>一试果然成功了。</p><p>但是还有几个疑问：</p><ol><li>为什么工程里默认的<code>messages.properties</code>可以加载？而公共 jar 包内的资源文件就不行？</li></ol><p>在 SpringBoot 层层叠叠的代码中，找到 <code>MessageSourceControl</code>中用于执行加载资源的 <code>newBundle</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResourceBundle <span class="title">newBundle</span><span class="params">(String baseName, Locale locale, String format, ClassLoader loader, <span class="keyword">boolean</span> reload)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, IOException </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (format.equals(<span class="string">"java.properties"</span>)) &#123;</span><br><span class="line">               String bundleName = <span class="keyword">this</span>.toBundleName(baseName, locale);</span><br><span class="line">               String resourceName = <span class="keyword">this</span>.toResourceName(bundleName, <span class="string">"properties"</span>);</span><br><span class="line">               ClassLoader classLoader = loader;</span><br><span class="line">               <span class="keyword">boolean</span> reloadFlag = reload;</span><br><span class="line"></span><br><span class="line">               InputStream inputStream;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   inputStream = (InputStream)AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">                       InputStream is = <span class="keyword">null</span>;</span><br><span class="line">                       <span class="keyword">if</span> (reloadFlag) &#123;</span><br><span class="line">                           URL url = classLoader.getResource(resourceName);</span><br><span class="line">                           <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                               URLConnection connection = url.openConnection();</span><br><span class="line">                               <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                   connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">                                   is = connection.getInputStream();</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           is = classLoader.getResourceAsStream(resourceName);</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">return</span> is;</span><br><span class="line">                   &#125;);</span><br><span class="line">                   ... 省略了后面的代码</span><br></pre></td></tr></table></figure><p>原来内部使用 AppClassLoader 来加载资源，而 AppClassLoader 的默认实现是按顺序加载 classpath 中的文件，找到第一个就返回。在我们的程序启动参数中，启动参数中，IDE 默认将本地资源放在 classpath 中 starter 的前面，因此 starter 内的同名资源<code>{basename + locale}.properties</code>便加载不了。</p><ol start="2"><li>是不是 basename 可以相同，只要包不同就可以加载？</li></ol><p>试了一下果然可以。</p><ol start="3"><li>为什么 starter 中 basename 相同， locale 不同就可以加载？</li></ol><p>原来 Spring Boot 在加载资源文件的时候，会使用多个 locale 来查找资源。如zh_CN，那么会从上到下来查找：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">zh_CN#Hans</span></span><br><span class="line"><span class="string">zh_CN_Hans</span></span><br><span class="line"><span class="string">zh_CN</span></span><br><span class="line"><span class="string">zh</span></span><br><span class="line">            <span class="string">===&gt;空的locale，默认</span></span><br></pre></td></tr></table></figure><p>工程内的资源文件和 starter 内的资源文件不重名时，都可以被加载进来。重名则如问题 1 所述的只会加载 classpath 中排在前面的。</p><p><strong>总而言之</strong>，只要能保证 starter 和工程中的资源文件 <code>basename + locale</code>不相同，就可以愉快地加载啦。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>综上所述，我们有两种方案来保证 starter 内部的 i18n 资源文件加载：</p><ol><li>将 starter 的 i18n 包重命名为 i18n-base，但需要使用包的工程配置中资源文件的 basename 加入这个前缀，否则不会生效。我们无法控制使用者如何配置，但解决方法也有，<code>MessageSource</code> 读取资源的时候，如果有 <code>parentMessageSource</code> 就会使用其加载资源——跟 ClassLoader 的父类委托加载机制如出一辙。我们默认将这个包加入到 <code>parentMessageSource</code> 中就行了，参考<a href="(https://github.com/ThomasKasene/example-parent-message-source/blob/master/src/main/java/com/thomaskasene/example/messagesource/parent/MessageSourceExtensionConfig.java">此处</a>)实现。</li><li>将 starter 的资源文件重命名。但我们无法控制 starter 使用者的行为，如果有同名文件，将覆盖公共包内的定义。不可行。</li></ol><p>方案 1 的代码如下所示 (Scala)：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OZMessageResourceAutoConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> <span class="type">MESSAGE_SOURCE_BEAN</span> = <span class="string">"messageSource"</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> <span class="type">MESSAGE_SOURCE_BASE</span> = <span class="string">"i18n-base/messages"</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span> <span class="function"><span class="keyword">def</span> <span class="title">messageSourceBaseLoader</span></span>: <span class="type">BeanPostProcessor</span> =</span><br><span class="line">    <span class="keyword">new</span> <span class="type">BeanPostProcessor</span>() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">postProcessBeforeInitialization</span></span>(bean: <span class="type">AnyRef</span>,</span><br><span class="line">                                                   beanName: <span class="type">String</span>): <span class="type">AnyRef</span> =</span><br><span class="line">        bean</span><br><span class="line"></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">postProcessAfterInitialization</span></span>(bean: <span class="type">AnyRef</span>,</span><br><span class="line">                                                  beanName: <span class="type">String</span>): <span class="type">AnyRef</span> = &#123;</span><br><span class="line">        bean <span class="keyword">match</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> source: <span class="type">HierarchicalMessageSource</span></span><br><span class="line">              <span class="keyword">if</span> beanName == <span class="type">MESSAGE_SOURCE_BEAN</span> =&gt;</span><br><span class="line">            <span class="keyword">val</span> parent = <span class="keyword">new</span> <span class="type">ResourceBundleMessageSource</span></span><br><span class="line">            parent.setBasename(<span class="type">MESSAGE_SOURCE_BASE</span>)</span><br><span class="line">            parent.setDefaultEncoding(<span class="type">StandardCharsets</span>.<span class="type">UTF_8</span>.name())</span><br><span class="line">            source.setParentMessageSource(parent)</span><br><span class="line">          <span class="keyword">case</span> _ =&gt;</span><br><span class="line">        &#125;</span><br><span class="line">        bean</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Wrap-it-up"><a href="#Wrap-it-up" class="headerlink" title="Wrap it up"></a>Wrap it up</h1><ol><li>Spring Boot 支持加载多个位置的多个资源文件，但要求 <code>basename + locale</code>不能重复。</li><li>通过跟踪代码，理解了 MessageResource 的加载原理，理清了加载流程。</li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://stackoverflow.com/questions/28750292/custom-spring-boot-starter-how-do-you-contribute-i18n-messages-to-the-messageso/30558018" target="_blank" rel="noopener">SO上的相关问题</a></li><li><a href="https://github.com/ThomasKasene/example-parent-message-source/blob/master/src/main/java/com/thomaskasene/example/messagesource/parent/MessageSourceExtensionConfig.java" target="_blank" rel="noopener">对应的gist</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h1&gt;&lt;p&gt;开发了一个 Spring Boot Starter，内置了一些公共代码。其中
      
    
    </summary>
    
    
      <category term="Spring-Boot" scheme="https://lukezhanin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab 迁移惊魂记</title>
    <link href="https://lukezhanin.github.io/2019/02/27/Gitlab-%E8%BF%81%E7%A7%BB%E6%83%8A%E9%AD%82%E8%AE%B0/"/>
    <id>https://lukezhanin.github.io/2019/02/27/Gitlab-迁移惊魂记/</id>
    <published>2019-02-27T08:24:24.000Z</published>
    <updated>2019-03-24T03:17:31.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司 Gitlab 新换了一台服务器，已经将老服务器数据迁移过去了。忽报 Push 代码后 Jenkins 无法自动构建镜像。</p><p>登上 Gitlab 准备看看是不是 Webhook 配置有问题，结果点开项目的集成页面，给我一个 500，没有具体错误，只让联系管理员。</p><p>恢复数据的同事没空，于是完全不熟悉 Gitlab 安装部署的我只好赶鸭子上架顶上了。</p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>打开 Gitlab 后台日志，将错误拿出来搜索。在 Gitlab Issues 里面，找到一个类似<a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/53465" target="_blank" rel="noopener">问题</a>，提到应该是迁移数据时没有将 <code>/etc/gitlab/gitlab-secrets.json</code>恢复，导致数据库中加密过的数据无法解密。下面的吃瓜群众纷纷表示恢复这个文件后就天下太平了。</p><p>幸好老的服务器还在，连忙将对应文件恢复到新服务器，并重启服务等待奇迹。然而，并没有……</p><p>这就难以理解了。难道我的操作姿势不对？</p><p>又是一番搜索，发现官方文档中说在密钥丢失时，可以删除掉 ci 相关变量，重新配置。那 Webhook 是不是可以如法炮制？</p><p>根据 ci 表名<code>ci_variables</code>猜测 Webhook 的表名应该是 <code>Webhooks</code>。打开 dbconsole 尝试查询，发现果然有这个表，而且表中数据有这个项目配置的钩子，而且内容是加密的。删掉本项目的几条数据，再次打开集成页面，可以打开，虽然之前配置的钩子都被删掉了。 </p><p>难道就这么简单地搞定了吗？不不，Too simple, sometimes naive。打开应用配置页面，发现无论点什么选项保存都报 500。这下完了。看来刚刚删除掉一个项目的钩子数据只是头痛医头而已。问题还是在于解密密钥不对导致系统内所有加密数据都无法解密。难道，得重新恢复整个 Gitlab？光是想想都觉得头痛。</p><p>还是得回过头来思考为什么刚才恢复了 <code>gitlab-secrets.json</code>却没起作用。</p><p>吃瓜群众们，你们到底还有什么压箱底的操作没有说出来？在另一个 issue 里，我发现了和我有相同遭遇的 Poor guy - Augusto Partida：<code>How can avoid this issue? restoring gitlab-secrets.json doesn&#39;t make any difference.</code></p><p>回到开头提到的那个 issue，里面有个老兄说用 <code>secrets.yml</code> 恢复了数据，难道我们的 <code>gitlab-secrets.json</code> 不起作用是因为程序并没有用到里面的密钥？</p><p>在文件系统中搜索一下，发现果然在 <code>/opt/gitlab/embedded/service/gitlab-rails/config/</code>下有个 <code>secrets.yml</code>。打开一看，里面果然有 <code>db_base_key</code>，而且跟 <code>/etc/gitlab/gitlab-secrets.json</code>中的值不相同。</p><p>看样子找到问题了，那么下面就只需要解决如何使我们的配置生效的问题。这个就简单了，稍稍搜索就能找到方法。</p><h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><p>恢复<code>gitlab-secrets.yml</code>文件后，需要重配置一下 Gitlab，并重启服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>同事之前迁移数据是找的中文博客，没有完全按照官方文档操作。官方文档中有说明要<a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html#storing-configuration-files" target="_blank" rel="noopener">备份配置文件</a>。如果完全按照官方文档操作，就不会有我这几个小时的折腾，也不会有这篇博客了。重要操作一定要先读官方文档，并按官方说明操作。</li><li>Gitlab 还有改进的空间，至少 500 的错误需要有相应的解决方法指引，不至于用户看到只能两眼一抹黑。</li><li>解决方法也许很简单，但寻找解决方法的过程却很曲折。如果我知道 Gitlab 配置生效需要 <code>reconfigure</code>一下，那么问题可能十分钟就能解决掉，不需要后面反复尝试。由此可以看出，在很多领域，如工程、看病，经验非常重要。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/53465" target="_blank" rel="noopener">Gitlab issue 53465</a></li><li><a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html#storing-configuration-files" target="_blank" rel="noopener">Gitlab backup and restore</a></li><li><a href="https://docs.gitlab.com/ee/administration/restart_gitlab.html#omnibus-gitlab-reconfigure" target="_blank" rel="noopener">Gitlab reconfigure</a></li><li><a href="https://juejin.im/post/5baf46326fb9a05cf039f57a" target="_blank" rel="noopener">Gitlab 迁移之后的事情</a>：这篇文章写得很对，但我们的症状比他的还要严重些。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司 Gitlab 新换了一台服务器，已经将老服务器数据迁移过去了。忽报 Push 代码后 Jenkins 无法自动构建镜像。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Tools&amp;Tips&amp;Tricks" scheme="https://lukezhanin.github.io/tags/Tools-Tips-Tricks/"/>
    
  </entry>
  
  <entry>
    <title>为什么我的 JWT 认证失败？</title>
    <link href="https://lukezhanin.github.io/2019/02/24/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84jwt-%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5%EF%BC%9F/"/>
    <id>https://lukezhanin.github.io/2019/02/24/为什么我的jwt-认证失败？/</id>
    <published>2019-02-24T02:14:46.000Z</published>
    <updated>2019-02-24T03:19:17.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我们的前后端分离架构采用了 JWT 作为认证方式。用户方测试团队用 Jmeter 测试时，发现大多数用例都 fail，有的甚至连最基础的获取用户权限接口都报错。</p><p>这就奇怪了。本地一直用着，在公司服务器上部署测试也没有问题。那是哪里出错了？</p><p>我们使用了一个 github 上的 <a href="https://github.com/zerouwar/utils" target="_blank" rel="noopener">jwt-spring-boot-starter</a> 来简化开发。</p><h1 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h1><p>从用户那里拿到 Jmeter 的用例，在本地环境用 Jmeter 跑了一下，没有任何错误。拿到测试日志分析，仔细研究了下，发现失败时端报的错是校验失败，没有其他信息，无法直接从日志看到具体问题。</p><p>而且并不是所有登录后的后续接口都失败了，而是有的成功，有的失败。初步怀疑是 token 格式错误或内容错误，导致拿到 JWT token 后服务端解析失败，认证无法通过。</p><p>再问用户测试版本的部署方式，原来他们用的是两台后端服务器。这看样子是可能出问题的地方。那就在本地尝试同样的部署方式来重现。</p><p>想办法将前端的 ngnix 路由改了一下，将本机也作为一个服务端加入进去，这样就可以在本机设断点调试，同时也与用户的环境保持一致。</p><p>启动 Jmeter 跑用例，将断点设在校验 token 的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               JWT.require(<span class="keyword">this</span>.ALGORITHM).build().verify(token);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (JWTVerificationException var3) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>果然，是 token 校验失败了，再次跟踪进去，到了 auth0 提供的 jwt 基础包里，跟踪到校验 token 签发时间的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertValidDateClaim</span><span class="params">(Date date, <span class="keyword">long</span> leeway, <span class="keyword">boolean</span> shouldBeFuture)</span> </span>&#123;</span><br><span class="line">       Date today = <span class="keyword">this</span>.clock.getToday();</span><br><span class="line">       today.setTime((<span class="keyword">long</span>)Math.floor((<span class="keyword">double</span>)(today.getTime() / <span class="number">1000L</span> * <span class="number">1000L</span>)));</span><br><span class="line">       <span class="keyword">if</span> (shouldBeFuture) &#123;</span><br><span class="line">           <span class="keyword">this</span>.assertDateIsFuture(date, leeway, today);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.assertDateIsPast(date, leeway, today);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>有点眉目了，就是这里返回了 false，导致 token 校验失败。</p><p>那么 token 为什么会在未来签发呢？想想我们有两台服务器，有没有可能是一台服务器签发的 token，到了另一台服务器校验发现 token 时间不对。</p><p>看了下公司服务器和我本机时间，果然差了二十五秒。为了验证是服务器时间不同造成的校验失败，将本机时间调成和服务器时间一致。再次测试没有再出现 token 校验错误。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>找到问题后，我们就要来想如何解决了。由于后端实例个数是不确定的，而且在生产环境上，多台服务器时间不可能保持完全一致。因此我们要想办法让 JWT 的时间校验有一定的容忍度，允许指定大小的偏移。</p><p>再次研究了下 auth0 的代码，发现早就考虑到了这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertValidDateClaim</span><span class="params">(Date date, <span class="keyword">long</span> leeway, <span class="keyword">boolean</span> shouldBeFuture)</span></span></span><br></pre></td></tr></table></figure><p>这个函数有一个 <code>leeway</code>的参数，就是用来接受一定的时间偏移，同时在最外层的校验函数就支持传 <code>leeway</code>。</p><p>我们再看看  <a href="https://github.com/zerouwar/utils" target="_blank" rel="noopener">jwt-spring-boot-starter</a> 实现的校验 token 方法，并没有传入 <code>leeway</code>。那解决方案就很简单了，我们继承 <code>SimpleTokenUtils</code>，覆盖<a href="https://github.com/zerouwar/utils" target="_blank" rel="noopener">jwt-spring-boot-starter</a> 实现的 <code>validateToken</code>方法， 将 <code>leeway</code> 传入校验函数就行了。当然， <code>leeway</code> 要放到配置文件中，方便根据现场网络环境来配置。</p><p>代码如下，我们用的是 Scala：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;utils.jwt.leeway:120&#125;"</span>)</span><br><span class="line"><span class="keyword">var</span> leeway: <span class="type">Long</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">validateToken</span></span>(token: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (token == <span class="literal">null</span>) <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 允许一定的时间偏移，以防止多个服务器时间轻微不同步引起 token 校验失败</span></span><br><span class="line">        <span class="type">JWT</span>.require(<span class="keyword">this</span>.<span class="type">ALGORITHM</span>).acceptLeeway(leeway).build.verify(token)</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> e: <span class="type">JWTVerificationException</span> =&gt;</span><br><span class="line">          <span class="keyword">val</span> decoded = <span class="type">JWT</span>.decode(token)</span><br><span class="line">          log.warn(</span><br><span class="line">            <span class="string">s"[<span class="subst">$&#123;decoded.getSubject&#125;</span>] invalid token: <span class="subst">$token</span>, error: <span class="subst">$&#123;e.getMessage&#125;</span> Check that the backend server time is synchronized. The leeway is <span class="subst">$leeway</span> s"</span>)</span><br><span class="line">          <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Fork 的代码在这里：<a href="https://github.com/lukezhanin/utils" target="_blank" rel="noopener">jwt-utils</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>重现测试问题时，必须要仔细确认测试环境，考虑可能影响问题出现的细节。</li><li>使用开源组件时，其参数和使用方式得研究透彻，确保不会有明显的坑。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;我们的前后端分离架构采用了 JWT 作为认证方式。用户方测试团队用 Jmeter 测试时，发现大多数用例都 fail，有的甚至连最基础的获取
      
    
    </summary>
    
    
      <category term="JWT" scheme="https://lukezhanin.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>你的Oracle时间类型用对了吗?</title>
    <link href="https://lukezhanin.github.io/2019/01/29/%E4%BD%A0%E7%9A%84Oracle%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B%E7%94%A8%E5%AF%B9%E4%BA%86%E5%90%97/"/>
    <id>https://lukezhanin.github.io/2019/01/29/你的Oracle时间类型用对了吗/</id>
    <published>2019-01-29T13:31:49.000Z</published>
    <updated>2019-02-15T12:33:26.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么对时间字段建了索引还是不走索引？"><a href="#为什么对时间字段建了索引还是不走索引？" class="headerlink" title="为什么对时间字段建了索引还是不走索引？"></a>为什么对时间字段建了索引还是不走索引？</h1><p>项目里有个遗留下来的 Oracle 数据库，用户反馈带时间字段查询时非常慢。一个一百多万条数据的库，页面分页查询十条记录要 5 秒才返回。</p><p>想想，页面显示慢有几种可能呢？</p><ol><li>数据库忙或网络丢包</li><li>后端服务器忙，响应不过来</li><li>用户机器慢，页面渲染慢</li><li>查询字段没建索引</li><li>字段建了索引但查询时没走索引</li></ol><p>一一排除后，发现是没走索引。后端使用的 Spring Data JPA + Hibernate。</p><p>字段定义如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(name = <span class="string">"firstoccurrence"</span>)</span><br><span class="line"><span class="keyword">var</span> firstOccurrence: java.sql.<span class="type">Timestamp</span> = _</span><br></pre></td></tr></table></figure><p>数据库中对应的字段类型为 Date。</p><h1 id="探寻真相"><a href="#探寻真相" class="headerlink" title="探寻真相"></a>探寻真相</h1><p>首先，Oracle DATE 不是 <code>java.sql.Date</code>，实际上是 <code>java.sql.Timestamp</code>，前者只保存年月日。我们的代码里使用 <code>java.sql.Timestamp</code> 是没问题的。</p><p>那为什么 Hibernate 生成的 SQL 的执行计划不走索引而走全表扫描？并且 Predicate 里会有个 <code>INTERNAL_FUNCTION()</code>?</p><p>StackOverflow 上找到一个有用的<a href="https://stackoverflow.com/questions/6612679/non-negligible-execution-plan-difference-with-oracle-when-using-jdbc-timestamp-o" target="_blank" rel="noopener">链接</a>，又链接到 JOOQ 的<a href="https://blog.jooq.org/2014/12/22/are-you-binding-your-oracle-dates-correctly-i-bet-you-arent/" target="_blank" rel="noopener">文章</a>。恍然大悟。</p><p>Oracle 会使用<code>INTERNAL_FUNCTION()</code>将我们传入的 Timestamp 转换为 Date，导致无法走索引。</p><p>解决方案有两个：</p><ol><li>使用 Hibernate 的 UserType，不让 Oracle 驱动执行转换</li><li>使用 JPA 2.1 的自定义 Converter</li></ol><p>考虑到我们不会换数据库，基础框架（Hibernate）在可预见的未来也不会换，因此使用了方法 1。</p><p>方法 2 在配合 Hibernate 使用时还有 bug，参见<a href="https://hibernate.atlassian.net/browse/HHH-9553" target="_blank" rel="noopener">此处</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><strong>自定义 UserType</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleCDate</span> <span class="keyword">implements</span> <span class="title">CompositeUserType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getPropertyNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"firstOccurrence"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Type[] getPropertyTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Type[]&#123;StandardBasicTypes.TIMESTAMP&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPropertyValue</span><span class="params">(Object component, <span class="keyword">int</span> property)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line"></span><br><span class="line">        DATE date = (DATE) component;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (property) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> date.timestampValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HibernateException(property +</span><br><span class="line">                <span class="string">" is an invalid property index for class type "</span> +</span><br><span class="line">                component.getClass().getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(Object component, <span class="keyword">int</span> property, Object value)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"A Timestamp is immutable."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;Timestamp&gt; <span class="title">returnedClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Timestamp.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o, Object o1)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(o, o1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(Object o)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">nullSafeGet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ResultSet rs,</span></span></span><br><span class="line"><span class="function"><span class="params">        String[] names,</span></span></span><br><span class="line"><span class="function"><span class="params">        SessionImplementor session,</span></span></span><br><span class="line"><span class="function"><span class="params">        Object owner</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rs.getTimestamp(names[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nullSafeSet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        PreparedStatement st,</span></span></span><br><span class="line"><span class="function"><span class="params">        Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="function"><span class="params">        SessionImplementor session</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// The magic is here: oracle.sql.DATE!</span></span><br><span class="line"><span class="comment">//        System.out.println("set DATE: " + index + ", value: " + value);</span></span><br><span class="line">        st.setObject(index, <span class="keyword">new</span> DATE(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepCopy</span><span class="params">(Object o)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMutable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">disassemble</span><span class="params">(Object o, SessionImplementor sessionImplementor)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">assemble</span><span class="params">(Serializable serializable, SessionImplementor sessionImplementor, Object o)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">replace</span><span class="params">(Object o, Object o1, SessionImplementor sessionImplementor, Object o2)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改实体字段注解</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeanProperty</span></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"firstoccurrence"</span>)</span><br><span class="line"><span class="comment">//必须使用转换器特殊处理，否则Oracle会做隐式转换，无法使用索引导致查询非常慢</span></span><br><span class="line"><span class="meta">@Type</span>(`<span class="class"><span class="keyword">type</span>` </span>= <span class="string">"com.a.b.repo.OracleCDate"</span>)</span><br><span class="line"><span class="keyword">var</span> firstOccurrence: java.sql.<span class="type">Timestamp</span> = _</span><br></pre></td></tr></table></figure><p>再次执行查询，愉快地走了索引。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>JDBC 中关于时间字段的使用颇为混乱，既可以用 <code>java.util.Date/Timestamp</code>，也可以用<code>java.sql.Date/Timestamp</code>。二者保存的值还不尽相同。在使用 JPA 时还可以在字段上加上注解 <code>@Temporal</code>来指定精度，并且还有 Oracle JDBC 这种剑走偏锋不按常理出牌的。稍有不慎便掉入坑中。</p><p>魔鬼在细节中，诚哉斯言。</p><h1 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h1><h3 id="子父类关系"><a href="#子父类关系" class="headerlink" title="子父类关系"></a>子父类关系</h3><table><thead><tr><th>java.lang.Object</th><th>java.lang.Object</th><th>java.lang.Object</th></tr></thead><tbody><tr><td>java.util.Date</td><td>java.util.Date</td><td>java.util.Date</td></tr><tr><td>-</td><td>java.sql.Timestamp</td><td>java.sql.Date</td></tr></tbody></table><h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><table><thead><tr><th>类型</th><th><code>java.util.Date</code></th><th><code>java.sql.Timestamp</code></th><th><code>java.sql.Date</code></th></tr></thead><tbody><tr><td><strong>精度</strong></td><td><strong>年 月 日 时 分 秒</strong></td><td><strong>年 月 日 时 分 秒 毫微秒</strong></td><td><strong>年 月 日</strong></td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://stackoverflow.com/questions/6612679/non-negligible-execution-plan-difference-with-oracle-when-using-jdbc-timestamp-o" target="_blank" rel="noopener">StackOverflow 上的问题</a></li><li><a href="https://blog.jooq.org/2014/12/22/are-you-binding-your-oracle-dates-correctly-i-bet-you-arent/" target="_blank" rel="noopener">JOOQ 的博客1</a></li><li><a href="https://blog.jooq.org/2014/12/29/leaky-abstractions-or-how-to-bind-oracle-date-correctly-with-hibernate/" target="_blank" rel="noopener">JOOQ 的博客2</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么对时间字段建了索引还是不走索引？&quot;&gt;&lt;a href=&quot;#为什么对时间字段建了索引还是不走索引？&quot; class=&quot;headerlink&quot; title=&quot;为什么对时间字段建了索引还是不走索引？&quot;&gt;&lt;/a&gt;为什么对时间字段建了索引还是不走索引？&lt;/h1&gt;&lt;p&gt;项目
      
    
    </summary>
    
    
      <category term="Java" scheme="https://lukezhanin.github.io/tags/Java/"/>
    
      <category term="DB" scheme="https://lukezhanin.github.io/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN 限制指定用户访问范围</title>
    <link href="https://lukezhanin.github.io/2019/01/13/OpenVPN-%E9%99%90%E5%88%B6%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E8%8C%83%E5%9B%B4/"/>
    <id>https://lukezhanin.github.io/2019/01/13/OpenVPN-限制指定用户访问范围/</id>
    <published>2019-01-13T07:55:29.000Z</published>
    <updated>2019-01-29T13:28:48.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TLDR版本"><a href="#TLDR版本" class="headerlink" title="TLDR版本"></a>TLDR版本</h1><p>给 DD-WRT 中的 OpenVPN 用户分配固定 IP，并限制用户访问内网范围：</p><h2 id="配置-OpenVPN，给用户分配固定IP"><a href="#配置-OpenVPN，给用户分配固定IP" class="headerlink" title="配置 OpenVPN，给用户分配固定IP"></a>配置 OpenVPN，给用户分配固定IP</h2><p>ssh 登录 DD-WRT，在<code>/jffs/etc/openvpn/ccd</code>下创建用户同名文件，并写入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig-push 192.168.123.253 255.255.255.0</span><br></pre></td></tr></table></figure><blockquote><p>VPN 子网按需修改。VPN Topology 模式配置为 Subnet。</p></blockquote><h2 id="配置防火墙，限制用户访问范围"><a href="#配置防火墙，限制用户访问范围" class="headerlink" title="配置防火墙，限制用户访问范围"></a>配置防火墙，限制用户访问范围</h2><p>ssh 登录 DD-WRT，配置防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 只允许 `192.168.123.253` 的 ip 访问 `192.168.0.60`：</span><br><span class="line">iptables -I FORWARD -i tun0 -s 192.168.123.253 ! -d 192.168.0.60 -j DROP</span><br></pre></td></tr></table></figure><h1 id="背景和需求"><a href="#背景和需求" class="headerlink" title="背景和需求"></a>背景和需求</h1><p>由于需要与其他公司的开发人员配合调试，远程部署到对方环境太麻烦，于是就想，能不能直接让对方 VPN 到内网来，调试起来有问题直接改。</p><p>出口路由器使用的是 DD-WRT， 内置了 OpenVPN，已经配置好证书且能正常登录。但现在的配置下 VPN 过来会有两个问题：</p><ol><li>客户端 IP 是动态分配的</li><li>由于客户端 IP 是动态的，所以无法用防火墙无法限制对方能访问的地址范围，会有信息泄露和安全问题。</li></ol><p>鉴于 DD-WRT 是基于 Linux 的固件，应该能配置出来，于是研究了一下。</p><p>DD-WRT 版本为： <code>DD-WRT v24-sp2 (03/25/13)</code>。</p><h1 id="思路和过程"><a href="#思路和过程" class="headerlink" title="思路和过程"></a>思路和过程</h1><p>如果能让特定用户登录后分配一个固定 IP，那访问权限限制就能轻松用防火墙实现。</p><p>首先找到了 DD-WRT 的 <a href="https://wiki.dd-wrt.com/wiki/index.php/OpenVPN#OpenVPN_in_DD-WRT" target="_blank" rel="noopener">Wiki</a>，信息比较简略，找不到能够修改客户端地址分配的配置。直接看 OpenVPN 的<a href="https://openvpn.net/community-resources/how-to/#scope" target="_blank" rel="noopener">文档</a>，发现确实可以给特定用户分配固定地址。关键配置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client-config-dir ccd</span><br></pre></td></tr></table></figure><p>具体的原理是：特定用户的配置文件，放在 <code>ccd</code>目录下，与用户名同名。OpenVPN 在用户登录时会检查相应配置并推送到客户端，且能动态生效，无需重启 OpenVPN 或 DD-WRT。</p><p>OpenVPN 文档里描述了如何给用户分配固定地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ccd/sysadmin1</span><br><span class="line">ifconfig-push 10.8.1.1 10.8.1.2</span><br></pre></td></tr></table></figure><p>再回头查 DD-WRT 文档里 OpenVPN 用户配置目录为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client-config-dir /tmp/openvpn/ccd</span><br></pre></td></tr></table></figure><p> 也就是说我们把客户端配置文件放到 DD-WRT 上的默认客户端配置目录下就行了。</p><p>不过这个地方有个问题：/tmp 文件系统是 DD-WRT 启动后在内存中建立的，重启后就会消失。又是好一番搜索，在 DD-WRT 论坛中找到一个<a href="https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=313912&amp;sid=2812478d99f4f916d3b65b1d9558698d" target="_blank" rel="noopener">解决方案</a>，在启动后用脚本自动重建配置文件。</p><p>能实现功能，但不够简单优雅。再找，终于在另一个<a href="https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=145460" target="_blank" rel="noopener">帖子</a>里发现，原来 DD-WRT 在其文件系统 <code>JFFS</code></p><p>中已经有 OpenVPN 对应的配置目录：<code>/jffs/etc/openvpn/ccd</code>。与 Wiki 中客户端配置文件在<code>/tmp/openvpn/ccd</code>中有点出入，试一下。</p><p>创建一个已有用户的配置文件，并用这个用户登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi test</span><br><span class="line">ifconfig-push 192.168.123.253 192.168.123.254</span><br><span class="line">保存</span><br></pre></td></tr></table></figure><blockquote><p>VPN 子网是 192.168.123.0/24</p></blockquote><p>客户端能登录 VPN，也能拿到指定的 IP，却无法访问内部网络。看样子应该是 IP 配置不正确。OpenVPN 文档中写明 IP 必须从这个集合里取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[  1,  2] [  5,  6] [  9, 10] [ 13, 14] [ 17, 18]</span><br><span class="line">[ 21, 22] [ 25, 26] [ 29, 30] [ 33, 34] [ 37, 38]</span><br><span class="line">[ 41, 42] [ 45, 46] [ 49, 50] [ 53, 54] [ 57, 58]</span><br><span class="line">[ 61, 62] [ 65, 66] [ 69, 70] [ 73, 74] [ 77, 78]</span><br><span class="line">[ 81, 82] [ 85, 86] [ 89, 90] [ 93, 94] [ 97, 98]</span><br><span class="line">[101,102] [105,106] [109,110] [113,114] [117,118]</span><br><span class="line">[121,122] [125,126] [129,130] [133,134] [137,138]</span><br><span class="line">[141,142] [145,146] [149,150] [153,154] [157,158]</span><br><span class="line">[161,162] [165,166] [169,170] [173,174] [177,178]</span><br><span class="line">[181,182] [185,186] [189,190] [193,194] [197,198]</span><br><span class="line">[201,202] [205,206] [209,210] [213,214] [217,218]</span><br><span class="line">[221,222] [225,226] [229,230] [233,234] [237,238]</span><br><span class="line">[241,242] [245,246] [249,250] [253,254]</span><br></pre></td></tr></table></figure><p>难道还有蹊跷？顺藤摸瓜发现，原来在 OpenVPN 中有 <a href="https://community.openvpn.net/openvpn/wiki/Concepts-Addressing" target="_blank" rel="noopener">Topology</a> 的概念，而前文所述的 IP 集合是在 <code>net30</code>的 Topology 模式下使用的。我们使用的是 <code>Subnet</code>模式，直接指定子网掩码就行了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig-push 192.168.123.254 255.255.255.0</span><br></pre></td></tr></table></figure><p>配置好后 VPN 登录 OK。</p><p>至于防火墙配置就简单了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 只允许 `192.168.123.254` 的 ip 访问 `192.168.0.60`：</span><br><span class="line">iptables -I FORWARD -i tun0 -s 192.168.123.254 ! -d 192.168.0.60 -j DROP</span><br></pre></td></tr></table></figure><p>顺便推荐几篇讲 iptables 的<a href="http://www.zsythink.net/archives/tag/iptables/" target="_blank" rel="noopener">文章</a>，条理清晰，形象易懂，终于理清了困扰多年的 iptables 概念。</p><p>在 Mac 上试了 OK，搞定收工。</p><h1 id="一波又起"><a href="#一波又起" class="headerlink" title="一波又起"></a>一波又起</h1><p>VPN 证书发给对方后，对方却说登录失败，错误日志是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is a clash between the --ifconfig local address and the internal DHCP server address</span><br></pre></td></tr></table></figure><p>一问发现是用 Windows 登录的。那么是地址不对？改成 <code>192.168.123.253</code>并相应修改防火墙规则后一切 OK，具体原因也找不到，猜测是跟 DHCP 分配的地址冲突了。但为什么 Mac 上又没问题？</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>思路很重要，多尝试不同的关键字搜索</li><li>测试需要考虑不同的平台，有可能有坑</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://openvpn.net/community-resources/how-to/#scope" target="_blank" rel="noopener">OpenVPN 配置固定 IP</a></li><li><a href="https://community.openvpn.net/openvpn/wiki/Concepts-Addressing" target="_blank" rel="noopener">Topology</a></li><li><a href="https://wiki.dd-wrt.com/wiki/index.php/OpenVPN#OpenVPN_in_DD-WRT" target="_blank" rel="noopener">DD-WRT Wiki</a></li><li><a href="https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=145460" target="_blank" rel="noopener">DD-WRT 中 OpenVPN 配置文件目录</a></li><li><a href="http://www.zsythink.net/archives/tag/iptables/" target="_blank" rel="noopener">Iptables 配置</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TLDR版本&quot;&gt;&lt;a href=&quot;#TLDR版本&quot; class=&quot;headerlink&quot; title=&quot;TLDR版本&quot;&gt;&lt;/a&gt;TLDR版本&lt;/h1&gt;&lt;p&gt;给 DD-WRT 中的 OpenVPN 用户分配固定 IP，并限制用户访问内网范围：&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="Tools&amp;Tips&amp;Tricks" scheme="https://lukezhanin.github.io/tags/Tools-Tips-Tricks/"/>
    
  </entry>
  
  <entry>
    <title>使用 JMX 远程监控 Docker 中运行的 Spring Boot 应用</title>
    <link href="https://lukezhanin.github.io/2019/01/12/%E4%BD%BF%E7%94%A8%20JMX%20%E7%9B%91%E6%8E%A7%20Docker%20%E4%B8%AD%E8%BF%90%E8%A1%8C%E7%9A%84%20Spring%20Boot%20%E5%BA%94%E7%94%A8/"/>
    <id>https://lukezhanin.github.io/2019/01/12/使用 JMX 监控 Docker 中运行的 Spring Boot 应用/</id>
    <published>2019-01-12T03:13:08.000Z</published>
    <updated>2019-01-14T02:05:50.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目中要求监控 Tomcat 的运行指标，如活动连接数、线程池情况等。我们使用的是 Spring Boot 内嵌的 Tomcat。</p><p>翻了下 Spring Boot 的手册，Spring Boot Actuator 中的 <code>/metrics</code> 端点中只暴露了 <code>httpsessions.active</code> 和 <code>httpsessions.max</code> 两个指标，不够用。</p><p>因此要研究一下如何开启 Spring Boot 内嵌 Tomcat 的 JMX 监控。</p><h1 id="远程监控"><a href="#远程监控" class="headerlink" title="远程监控"></a>远程监控</h1><p>Google 了一下，发现 Spring Boot 已支持 JMX 监控。本机直接启动 jconsole 即可连接。</p><p>远程 JMX 连接需要配置启动参数，在 JVM 启动参数中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote </span><br><span class="line">-Dcom.sun.management.jmxremote.port=<span class="number">1898</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="keyword">false</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="keyword">false</span> </span><br><span class="line">-Djava.rmi.server.hostname=<span class="number">192.168</span>.0.90</span><br></pre></td></tr></table></figure><p>具体在 IDEA 中需要配置到 <code>VM options</code>里。</p><h1 id="在-Docker-中远程监控"><a href="#在-Docker-中远程监控" class="headerlink" title="在 Docker 中远程监控"></a>在 Docker 中远程监控</h1><p>在 IDEA 中运行成功后，本以为将上面的启动参数加到 Docker 的环境变量里便能开开心心地玩耍了。谁知道 jconsole 可以远程连上 Docker 应用，但弹出不安全连接后，便连接失败。</p><p>搜索一番，终于在 <a href="https://ptmccarthy.github.io/2014/07/24/remote-jmx-with-docker/" target="_blank" rel="noopener">此处</a> 找到答案，原来 JMX 除了初始的连接端口外，还会另外动态分配一个端口用于 RMI 连接。因此要显式配置一下才行：</p><p><code>-Dcom.sun.management.jmxremote.rmi.port=1898</code></p><p>当然，Docker 的启动参数需要将端口 1898 映射出来。</p><p>完整的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote </span><br><span class="line">-Dcom.sun.management.jmxremote.port=<span class="number">1898</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.rmi.port=<span class="number">1898</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="keyword">false</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="keyword">false</span> </span><br><span class="line">-Djava.rmi.server.hostname=<span class="number">192.168</span>.0.90</span><br></pre></td></tr></table></figure><p>再想一下，为何在 IDEA 里面不需要显式配置RMI 端口呢？答案很简单，因为 Docker 必须显式指定映射到主机上的端口，动态分配的端口不会映射出来，因此 jconsole 连接时虽然刚开始可以连接上，但接下来 RMI 必然会失败。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;项目中要求监控 Tomcat 的运行指标，如活动连接数、线程池情况等。我们使用的是 Spring Boot 内嵌的 Tomcat。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Java" scheme="https://lukezhanin.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://lukezhanin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
